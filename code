CREATE SCHEMA dannys_diner;


CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
    
 1. 

 Select s.customer_id, sum(price) as total_sales
from sales as s
join menu as m  
On s.product_id = m.product_id
group by customer_id; 

2. 

Select customer_id, count(distinct order_date) As days_visted
From sales
Group by customer_i

3.SELECT top 4 customer_id,min(order_date) as date,product_name
from sales as s
join menu  as m 
On s.product_id = m.product_id
GROUP BY order_date,customer_id,product_name
having order_date = min(order_date) 

4.
Select product_name, count(s.product_id )as total_purchase
From sales as S
Join menu as M 
On s.product_id = m.product_id
Group by s.product_id, product_name
order by total_purchase DESC


5.

Select customer_id, product_name, count(s.product_id) as most_poular
From sales as S
Join menu as M 
On s.product_id = m.product_id
Group by customer_id, product_name
Order by customer_id, most_poular DESC

6.
with aftercte  as
(
select s.order_date, m.join_date, s.customer_id,s.product_id,
dense_rank() over (partition by s.customer_id order by order_date) as rank
 FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
  where s.order_date >= m.join_date
  )
  select customer_id,s.order_date, m2.product_name
  from aftercte as s
  join menu  as m2
  on s.product_id = m2.product_id
  where rank = 1 

7
with firstcte  as
(
select s.order_date, m.join_date, s.customer_id,s.product_id,
dense_rank() over (partition by s.customer_id order by order_date desc) as rank
 FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
  where s.order_date < m.join_date
  )
  select customer_id,s.order_date, m2.product_name
  from firstcte as s
  join menu  as m2
  on s.product_id = m2.product_id
  where rank = 1 

8.
select s.customer_id, 
sum(price) as amount_spent,
count(DISTINCT m2.product_id) as total_items
 FROM sales AS s
 JOIN members AS m
  ON s.customer_id = m.customer_id
  join menu as M2
  on s.product_id = m2.product_id
  where s.order_date < m.join_date 
 group by s.customer_id
 order by s.customer_id
  
9. 

with points_cte as 
( select * ,
case when product_id = 1 then price * 20 
else price * 10
end as points 
from menu as m 
)
select s.customer_id, sum(p.points) as total_points
from sales as s
join points_cte as p 
on s.product_id = p.product_id
group by s.customer_id 
order by s.customer_id



10.
WITH join_date_cte AS 
(
 SELECT *, 
  DATEADD(DAY, 6, join_date) AS end_week, 
  EOMONTH('2021-01-31') AS last_date
 FROM members AS m
)
SELECT j.customer_id, s.order_date, j.join_date, 
 j.end_week, j.last_date, m.product_name, m.price,
 SUM(CASE
  WHEN m.product_name = 'sushi' THEN 2 * 10 * m.price
  WHEN s.order_date BETWEEN j.join_date AND j.end_week THEN 2 * 10 * m.price
  ELSE 10 * m.price
  END) AS points
FROM join_date_cte AS j
JOIN sales AS s
 ON j.customer_id = s.customer_id
JOIN menu AS m
 ON s.product_id = m.product_id
WHERE s.order_date < j.last_date
GROUP BY j.customer_id, s.order_date, j.join_date, j.end_week, j.last_date, m.product_name, m.price



